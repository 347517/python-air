# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'windows.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import ctypes
import inspect
import os
import time
import sys
from threading import Thread

import main
import serial
import serial.tools.list_ports
from sklearn import datasets
from sklearn import svm
from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix
import scipy as sp
import os
import joblib
import signals
import KeyValue
from sklearn.model_selection import GridSearchCV
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
from PyQt5 import QtCore, QtGui, QtWidgets


class Worker(QThread):
    sinOut = pyqtSignal(str)  # 自定义信号，执行run()函数时，从相关线程发射此信号

    def __init__(self, parent=None):
        super(Worker, self).__init__(parent)
        self.working = True
        self.num = 0

    def __del__(self):
        self.working = False
        self.wait()

    def run(self):
        while self.working:
            file_str = 'File index {0}'.format(self.num)  # str.format()
            self.num += 1
            self.sinOut.emit(file_str)
            time.sleep(0.1)


class Ui_MainWindow(object):

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(943, 644)
        MainWindow.setMinimumSize(QtCore.QSize(943, 0))
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.groupBox = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox.setGeometry(QtCore.QRect(10, 10, 911, 51))
        self.groupBox.setObjectName("groupBox")
        self.label = QtWidgets.QLabel(self.groupBox)
        self.label.setGeometry(QtCore.QRect(10, 20, 51, 21))
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.groupBox)
        self.label_2.setGeometry(QtCore.QRect(180, 20, 54, 20))
        self.label_2.setObjectName("label_2")

        self.cbPoartName = QtWidgets.QComboBox(self.groupBox)
        self.cbPoartName.setGeometry(QtCore.QRect(60, 20, 101, 22))
        self.cbPoartName.setObjectName("cbPoartName")
        port_list = list(serial.tools.list_ports.comports())
        for each_port in port_list:
            self.cbPoartName.addItem(each_port[0])

        self.cbBaudRate = QtWidgets.QComboBox(self.groupBox)
        self.cbBaudRate.setGeometry(QtCore.QRect(230, 20, 91, 21))
        self.cbBaudRate.setObjectName("cbBaudRate")
        self.cbBaudRate.addItem("")
        self.cbBaudRate.addItem("")
        self.cbBaudRate.addItem("")
        self.cbBaudRate.addItem("")

        self.cbLearnMode = QtWidgets.QCheckBox(self.groupBox)
        self.cbLearnMode.setGeometry(QtCore.QRect(350, 20, 71, 16))
        self.cbLearnMode.setObjectName("cbLearnMode")
        self.cbLearnMode.stateChanged.connect(self.LearnModeChange)

        self.cbPredictMode = QtWidgets.QCheckBox(self.groupBox)
        self.cbPredictMode.setGeometry(QtCore.QRect(450, 20, 71, 16))
        self.cbPredictMode.setObjectName("cbPredictMode")
        self.cbPredictMode.setChecked(True)
        self.cbPredictMode.stateChanged.connect(self.PredictModeChange)

        self.btnCreatModel = QtWidgets.QPushButton(self.groupBox)
        self.btnCreatModel.setGeometry(QtCore.QRect(800, 10, 91, 31))
        self.btnCreatModel.setObjectName("btnCreatModel")
        self.btnCreatModel.clicked.connect(self.CreatModel)

        self.btnOpenSerial = QtWidgets.QPushButton(self.groupBox)
        self.btnOpenSerial.setGeometry(QtCore.QRect(540, 10, 91, 31))
        self.btnOpenSerial.setObjectName("btnOpenSerial")
        self.btnOpenSerial.clicked.connect(self.OpenSerial)

        self.groupBox_2 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_2.setGeometry(QtCore.QRect(10, 70, 681, 561))
        self.groupBox_2.setObjectName("groupBox_2")

        self.labPredict = QtWidgets.QLabel(self.groupBox_2)
        self.labPredict.setGeometry(QtCore.QRect(200, 10, 291, 331))
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(200)
        self.labPredict.setFont(font)
        self.labPredict.setObjectName("labPredict")

        self.textEdit_2 = QtWidgets.QTextEdit(self.groupBox_2)
        self.textEdit_2.setGeometry(QtCore.QRect(10, 410, 671, 141))
        self.textEdit_2.setObjectName("textEdit_2")
        self.textEdit_2.setReadOnly(True)

        self.label_7 = QtWidgets.QLabel(self.groupBox_2)
        self.label_7.setGeometry(QtCore.QRect(20, 380, 51, 21))
        self.label_7.setObjectName("label_7")

        self.btnClear_2 = QtWidgets.QPushButton(self.groupBox_2)
        self.btnClear_2.setGeometry(QtCore.QRect(570, 380, 111, 31))
        self.btnClear_2.setObjectName("btnClear_2")
        self.btnClear_2.clicked.connect(self.ClearSysInformation)

        self.groupBox_3 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_3.setGeometry(QtCore.QRect(700, 70, 241, 561))
        self.groupBox_3.setObjectName("groupBox_3")

        self.label_4 = QtWidgets.QLabel(self.groupBox_3)
        self.label_4.setGeometry(QtCore.QRect(30, 30, 51, 21))
        self.label_4.setObjectName("label_4")

        self.cbRecordChar = QtWidgets.QComboBox(self.groupBox_3)
        self.cbRecordChar.setGeometry(QtCore.QRect(100, 30, 111, 22))
        self.cbRecordChar.setObjectName("cbRecordChar")
        self.cbRecordChar.addItem("")
        self.cbRecordChar.addItem("")
        self.cbRecordChar.addItem("")
        self.cbRecordChar.addItem("")
        self.cbRecordChar.addItem("")
        self.cbRecordChar.addItem("")
        self.cbRecordChar.addItem("")
        self.cbRecordChar.addItem("")
        self.cbRecordChar.addItem("")
        self.cbRecordChar.addItem("")
        self.cbRecordChar.addItem("")
        self.cbRecordChar.addItem("")
        self.cbRecordChar.addItem("")
        self.cbRecordChar.addItem("")
        self.cbRecordChar.addItem("")
        self.cbRecordChar.addItem("")
        self.cbRecordChar.addItem("")
        self.cbRecordChar.addItem("")
        self.cbRecordChar.addItem("")
        self.cbRecordChar.addItem("")
        self.cbRecordChar.addItem("")
        self.cbRecordChar.addItem("")
        self.cbRecordChar.addItem("")
        self.cbRecordChar.addItem("")
        self.cbRecordChar.addItem("")
        self.cbRecordChar.addItem("")
        self.cbRecordChar.currentIndexChanged.connect(self.RecordCharChange)

        self.label_5 = QtWidgets.QLabel(self.groupBox_3)
        self.label_5.setGeometry(QtCore.QRect(30, 70, 51, 21))
        self.label_5.setObjectName("label_5")

        self.textEdit = QtWidgets.QTextEdit(self.groupBox_3)
        self.textEdit.setGeometry(QtCore.QRect(10, 190, 221, 321))
        self.textEdit.setObjectName("textEdit")

        self.btnRecordLast = QtWidgets.QPushButton(self.groupBox_3)
        self.btnRecordLast.setGeometry(QtCore.QRect(20, 110, 91, 31))
        self.btnRecordLast.setObjectName("btnRecordLast")
        self.btnRecordLast.clicked.connect(self.LastRecord)

        self.btnRecordNext = QtWidgets.QPushButton(self.groupBox_3)
        self.btnRecordNext.setGeometry(QtCore.QRect(140, 110, 91, 31))
        self.btnRecordNext.setObjectName("btnRecordNext")
        self.btnRecordNext.clicked.connect(self.NextRecord)

        self.label_6 = QtWidgets.QLabel(self.groupBox_3)
        self.label_6.setGeometry(QtCore.QRect(10, 160, 51, 21))
        self.label_6.setObjectName("label_6")

        self.btnClear = QtWidgets.QPushButton(self.groupBox_3)
        self.btnClear.setGeometry(QtCore.QRect(10, 520, 221, 31))
        self.btnClear.setObjectName("btnClear")
        self.btnClear.clicked.connect(self.ClearRecordInformation)

        self.RecordNumber = QtWidgets.QLabel(self.groupBox_3)
        self.RecordNumber.setGeometry(QtCore.QRect(100, 60, 51, 41))
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(16)
        font.setBold(False)
        font.setWeight(50)
        self.RecordNumber.setFont(font)
        self.RecordNumber.setObjectName("RecordNumber")
        self.RecordNumber.setStyleSheet("color:red")

        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.Readthread = Worker()
        self.Readthread.sinOut.connect(self.UpdateUiText)
        self.Readthread.Daemon = True

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.groupBox.setTitle(_translate("MainWindow", "系统设置"))
        self.label.setText(_translate("MainWindow", "串口号:"))
        self.label_2.setText(_translate("MainWindow", "波特率:"))
        self.cbBaudRate.setItemText(0, _translate("MainWindow", "115200"))
        self.cbBaudRate.setItemText(1, _translate("MainWindow", "9600"))
        self.cbBaudRate.setItemText(2, _translate("MainWindow", "38400"))
        self.cbBaudRate.setItemText(3, _translate("MainWindow", "57600"))
        self.cbLearnMode.setText(_translate("MainWindow", "记录模式"))
        self.btnCreatModel.setText(_translate("MainWindow", "模型生成"))
        self.cbPredictMode.setText(_translate("MainWindow", "预测模式"))
        self.btnOpenSerial.setText(_translate("MainWindow", "打开串口"))
        self.groupBox_2.setTitle(_translate("MainWindow", "预  测"))
        self.labPredict.setText(_translate("MainWindow", "a"))
        self.label_7.setText(_translate("MainWindow", "系统信息:"))
        self.btnClear_2.setText(_translate("MainWindow", "清空系统信息"))
        self.groupBox_3.setTitle(_translate("MainWindow", "记  录"))
        self.label_4.setText(_translate("MainWindow", "字    符:"))
        self.cbRecordChar.setItemText(0, _translate("MainWindow", "a"))
        self.cbRecordChar.setItemText(1, _translate("MainWindow", "b"))
        self.cbRecordChar.setItemText(2, _translate("MainWindow", "c"))
        self.cbRecordChar.setItemText(3, _translate("MainWindow", "d"))
        self.cbRecordChar.setItemText(4, _translate("MainWindow", "e"))
        self.cbRecordChar.setItemText(5, _translate("MainWindow", "f"))
        self.cbRecordChar.setItemText(6, _translate("MainWindow", "g"))
        self.cbRecordChar.setItemText(7, _translate("MainWindow", "h"))
        self.cbRecordChar.setItemText(8, _translate("MainWindow", "i"))
        self.cbRecordChar.setItemText(9, _translate("MainWindow", "j"))
        self.cbRecordChar.setItemText(10, _translate("MainWindow", "k"))
        self.cbRecordChar.setItemText(11, _translate("MainWindow", "l"))
        self.cbRecordChar.setItemText(12, _translate("MainWindow", "m"))
        self.cbRecordChar.setItemText(13, _translate("MainWindow", "n"))
        self.cbRecordChar.setItemText(14, _translate("MainWindow", "o"))
        self.cbRecordChar.setItemText(15, _translate("MainWindow", "p"))
        self.cbRecordChar.setItemText(16, _translate("MainWindow", "q"))
        self.cbRecordChar.setItemText(17, _translate("MainWindow", "r"))
        self.cbRecordChar.setItemText(18, _translate("MainWindow", "s"))
        self.cbRecordChar.setItemText(19, _translate("MainWindow", "t"))
        self.cbRecordChar.setItemText(20, _translate("MainWindow", "u"))
        self.cbRecordChar.setItemText(21, _translate("MainWindow", "v"))
        self.cbRecordChar.setItemText(22, _translate("MainWindow", "w"))
        self.cbRecordChar.setItemText(23, _translate("MainWindow", "x"))
        self.cbRecordChar.setItemText(24, _translate("MainWindow", "y"))
        self.cbRecordChar.setItemText(25, _translate("MainWindow", "z"))
        self.label_5.setText(_translate("MainWindow", "序    号:"))
        self.btnRecordLast.setText(_translate("MainWindow", "上一个"))
        self.btnRecordNext.setText(_translate("MainWindow", "下一个"))
        self.label_6.setText(_translate("MainWindow", "详细过程:"))
        self.btnClear.setText(_translate("MainWindow", "清空过程记录"))
        self.RecordNumber.setText(_translate("MainWindow", "0"))



    def OpenSerial(self):
        if(self.btnOpenSerial.text() == "打开串口"):
            try:
                main.ser = serial.Serial(self.cbPoartName.currentText(), self.cbBaudRate.currentText(), timeout=100)
                if main.ser.isOpen():
                    main.thread1.start()
                    self.Readthread.start()
                    # # 启动线程
                    self.btnOpenSerial.setText("关闭程序")
            except:
                self.textEdit_2.append("串口开启失败，请检查串口是否存在或被占用...")
        else:
            main.ser.close()
            sys.exit()
            if main.ser.isOpen() == False:
                self.btnOpenSerial.setText("打开串口")

    def ClearSysInformation(self):
        self.textEdit_2.clear()

    def ClearRecordInformation(self):
        self.textEdit.clear()

    """该方法在选中学习模式时被调用,进入学习模式。"""
    def LearnModeChange(self):
        if self.cbLearnMode.isChecked() == True:
            main.PredictOrLearn = 1
            self.cbPredictMode.setChecked(False)

    """该方法在选中预测模式时被调用,进入预测模式。"""
    def PredictModeChange(self):
        if self.cbPredictMode.isChecked() == True:
            main.PredictOrLearn = 0
            self.cbLearnMode.setChecked(False)

    def LastRecord(self):
        if KeyValue.current_sample > 0:
            KeyValue.current_sample -= 1
            self.RecordNumber.setText(str(KeyValue.current_sample))

    def NextRecord(self):
        KeyValue.current_sample += 1
        self.RecordNumber.setText(str(KeyValue.current_sample))

    """根据程序的不同模式（预测模式或学习模式），更新 GUI 界面上的文本显示。"""
    def UpdateUiText(self):
        if main.PredictOrLearn == 0:  #预测
            self.labPredict.setText(KeyValue.predictchar)
            if KeyValue.predict_end:
                self.textEdit_2.append(KeyValue.predic_Information_str)
                KeyValue.predict_end = False
        else: #学习
            if KeyValue.sample_record_end == True:
                recordstr = "记录完成，字符类：{0} 批次：{1} 序号：{2}".format(KeyValue.target_sign,"0",KeyValue.current_sample)
                recordNamestr = "文件名为:{0}_sample_0_{1}".format(KeyValue.target_sign,KeyValue.current_sample)
                self.textEdit.append(recordstr)
                self.textEdit.append(recordNamestr)
                KeyValue.sample_record_end = False

    def RecordCharChange(self):
        KeyValue.target_sign = self.cbRecordChar.currentText()
        KeyValue.current_sample = 0
        self.RecordNumber.setText("0")

    def CreatModel(self):
        print("Sklearn打包exe只能开启单线程处理，数据较大可能速度可能会较慢，请耐心等待...")
        x_data = []
        y_data = []
        classes = {}
        root = "data"
        for path, subdirs, files in os.walk(root):
            for name in files:
                filename = os.path.join(path, name)
                sample = signals.Sample.load_from_file(filename)
                x_data.append(sample.get_linearized())
                category = name.split("_")[0]
                number = ord(category) - ord("a")
                y_data.append(number)
                classes[number] = category

        params = {'C': [0.001, 0.01, 0.1, 1], 'kernel': ['linear']}
        svc = svm.SVC(probability=True)
        clf = GridSearchCV(svc, params, verbose=10, n_jobs=1)
        X_train, X_test, Y_train, Y_test = train_test_split(x_data,y_data, test_size=0.35, random_state=0)
        clf.fit(X_train, Y_train)
        score = clf.score(X_test, Y_test)
        self.textEdit_2.append("最佳预测参数: " + str(clf.best_estimator_))
        self.textEdit_2.append("SCORE: {score}".format(score=score))
        # 将模型保存到“model.pkl”文件中
        joblib.dump(clf, 'model.pkl')
        # 将类型保存到“classes.pkl”文件中
        joblib.dump(classes, 'classes.pkl')
        self.textEdit_2.append("模型保存完毕,请手动重启后使用预测...")